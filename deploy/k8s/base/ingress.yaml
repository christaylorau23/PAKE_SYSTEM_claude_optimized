apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pake-ingress
  namespace: pake-system
  labels:
    app.kubernetes.io/name: pake-ingress
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: pake-system
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/proxy-body-size: '50m'
    nginx.ingress.kubernetes.io/proxy-connect-timeout: '600'
    nginx.ingress.kubernetes.io/proxy-send-timeout: '600'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '600'
    nginx.ingress.kubernetes.io/rate-limit: '100'
    nginx.ingress.kubernetes.io/rate-limit-window: '1m'
    cert-manager.io/cluster-issuer: 'letsencrypt-prod'
spec:
  tls:
    - hosts:
        - pake.example.com
        - api.pake.example.com
      secretName: pake-tls-cert
  rules:
    # Frontend routing
    - host: pake.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: pake-frontend-service
                port:
                  number: 3000
    # API routing
    - host: api.pake.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: pake-backend-service
                port:
                  number: 8000
          # Health check endpoint
          - path: /health
            pathType: Exact
            backend:
              service:
                name: pake-backend-service
                port:
                  number: 8000
          # API versioning
          - path: /v1
            pathType: Prefix
            backend:
              service:
                name: pake-backend-service
                port:
                  number: 8000
          # Metrics endpoint (restrict access in production)
          - path: /metrics
            pathType: Exact
            backend:
              service:
                name: pake-backend-service
                port:
                  number: 9090
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pake-network-policy
  namespace: pake-system
  labels:
    app.kubernetes.io/name: pake-network-policy
    app.kubernetes.io/component: security
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow ingress from nginx ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000
        - protocol: TCP
          port: 8000
    # Allow internal pod-to-pod communication
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/part-of: pake-system
      ports:
        - protocol: TCP
          port: 5432
        - protocol: TCP
          port: 6379
        - protocol: TCP
          port: 8000
        - protocol: TCP
          port: 3000
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow HTTPS outbound (for external APIs)
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow HTTP outbound (for health checks, webhooks)
    - to: []
      ports:
        - protocol: TCP
          port: 80
    # Allow internal communication
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/part-of: pake-system
      ports:
        - protocol: TCP
          port: 5432
        - protocol: TCP
          port: 6379
        - protocol: TCP
          port: 8000
        - protocol: TCP
          port: 3000
