apiVersion: v1
kind: ServiceMonitor
metadata:
  name: wealth-platform-metrics
  namespace: wealth-platform
  labels:
    app: wealth-platform
spec:
  selector:
    matchLabels:
      app: wealth-platform
  endpoints:
    - port: metrics
      interval: 10s
      path: /metrics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: wealth-platform
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus/'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=30d' # Retain 30 days of data
            - '--web.enable-lifecycle'
          ports:
            - containerPort: 9090
              name: prometheus
          resources:
            requests:
              cpu: '1'
              memory: '4Gi'
            limits:
              cpu: '2'
              memory: '8Gi'
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/
            - name: prometheus-data
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: wealth-platform
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
      name: prometheus
  selector:
    app: prometheus
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data-pvc
  namespace: wealth-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: wealth-platform
data:
  prometheus.yml: |
    global:
      scrape_interval: 10s
      evaluation_interval: 10s

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
    - job_name: 'wealth-platform'
      static_configs:
      - targets: ['wealth-platform-service:80']
      metrics_path: '/metrics'
      scrape_interval: 5s

    - job_name: 'redis'
      static_configs:
      - targets: ['redis-service:6379']
      metrics_path: '/metrics'

    - job_name: 'postgresql'
      static_configs:
      - targets: ['postgresql-primary-service:5432']

    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - wealth-platform
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: wealth-platform
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
              name: grafana
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: admin-REDACTED_SECRET
            - name: GF_INSTALL_PLUGINS
              value: 'grafana-clock-panel,grafana-simple-json-datasource'
          resources:
            requests:
              cpu: '0.5'
              memory: '1Gi'
            limits:
              cpu: '1'
              memory: '2Gi'
          volumeMounts:
            - name: grafana-data
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-data-pvc
        - name: grafana-config
          configMap:
            name: grafana-config
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: wealth-platform
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      name: grafana
  selector:
    app: grafana
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data-pvc
  namespace: wealth-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd
# Secret is now managed by External Secrets Operator
# See external-secrets-operator.yaml for configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: wealth-platform
data:
  grafana.ini: |
    [analytics]
    check_for_updates = false

    [log]
    mode = console
    level = info

    [paths]
    data = /var/lib/grafana
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    [server]
    protocol = http
    http_port = 3000
    domain = localhost
    enable_gzip = true

    [database]
    type = sqlite3
    host = 127.0.0.1:3306
    name = grafana
    user = root
    REDACTED_SECRET =
    url =
    ssl_mode = disable
    path = grafana.db

    [security]
    admin_user = admin
    cookie_secure = false
    cookie_samesite = lax

    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_role = Viewer

    [auth.anonymous]
    enabled = false

    [dashboards]
    default_home_dashboard_path = /var/lib/grafana/dashboards/wealth-platform-overview.json
