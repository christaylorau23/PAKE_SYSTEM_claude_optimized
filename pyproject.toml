[tool.poetry]
name = "pake-system"
version = "1.0.0"
description = "A comprehensive, AI-powered knowledge engineering platform with enterprise features, real-time trend intelligence, and multi-source ingestion capabilities."
authors = ["chris <christaylorau23@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.12"

# ===== CORE WEB FRAMEWORK =====
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.32.0"}
starlette = "^0.37.2"

# ===== DATA VALIDATION & CONFIGURATION =====
pydantic = "^2.9.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"

# ===== DATABASE & PERSISTENCE =====
sqlalchemy = "^2.0.25"
asyncpg = "^0.29.0"
alembic = "^1.13.1"
psycopg2-binary = "^2.9.9"
sqlalchemy-utils = "^0.42.0"
pgvector = "^0.2.4"

# ===== CACHING & PERFORMANCE =====
redis = {extras = ["streams"], version = "^5.2.0"}
hiredis = "^2.3.2"
# aioredis = "^2.0.1"  # Deprecated: Use redis package with async support
# asyncio-redis = "^1.15.1"  # Deprecated: Use redis package with async support
# redis-py-cluster = "^2.1.3"  # Deprecated: Use redis package with cluster support

# ===== HTTP CLIENTS =====
aiohttp = "^3.9.1"
httpx = "^0.28.0"

# ===== AUTHENTICATION & SECURITY =====
# pyjwt = {extras = ["crypto"], version = "^2.10.0"}  # Removed: Let fastapi-users manage this dependency
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
argon2-cffi = "^23.1.0"
cryptography = "^44.0.1"
# python-multipart = "^0.0.18"  # Removed: Let fastapi-users manage this dependency
python-jose = "^3.3.0"
email-validator = "^2.1.0"
itsdangerous = "^2.1.2"
secure = "^0.3.0"
python-secrets = "^23.1.0"
bcrypt = "^4.1.0"

# ===== WEBSOCKET & REAL-TIME =====
websockets = "^12.0"
python-socketio = "^5.11.0"
channels = "^4.0.0"
channels-redis = "^4.2.0"

# ===== ASYNC & PERFORMANCE =====
aiofiles = "^24.1.0"
uvloop = "^0.19.0"
orjson = "^3.9.10"
cython = "^3.0.7"

# ===== SECURE SERIALIZATION =====
msgpack = "^1.0.7"
cbor2 = "^5.5.1"

# ===== MONITORING & OBSERVABILITY =====
structlog = "^23.2.0"
prometheus-client = "^0.19.0"
psutil = "^5.9.7"
opentelemetry-api = "^1.22.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
sentry-sdk = "^1.39.2"

# ===== BACKGROUND TASKS =====
celery = "^5.3.4"
apscheduler = "^3.10.4"
dramatiq = "^1.15.0"

# ===== DATA PROCESSING & ANALYTICS =====
numpy = "^2.1.0"
pandas = "^2.1.4"
matplotlib = "^3.8.2"
seaborn = "^0.13.0"
plotly = "^5.18.0"
scikit-learn = "^1.3.2"
scipy = "^1.11.4"
statsmodels = "^0.14.0"

# ===== AI/ML & NLP =====
transformers = "^4.36.2"
sentence-transformers = "^3.2.1"

# ===== TEMPLATE RENDERING =====
jinja2 = "^3.1.2"

# ===== FILE PROCESSING =====
openpyxl = "^3.1.2"
xlsxwriter = "^3.1.9"
python-dateutil = "^2.8.2"

# ===== RATE LIMITING =====
slowapi = "^0.1.9"
cachetools = "^5.3.2"
ratelimit = "^2.2.1"
backoff = "^2.2.1"

# ===== LOGGING & OUTPUT =====
loguru = "^0.7.2"
rich = "^13.7.0"

# ===== USER MANAGEMENT =====
fastapi-users = "^12.1.3"

# ===== PRODUCTION SERVERS =====
gunicorn = "^21.2.0"
hypercorn = "^0.16.0"
daphne = "^4.0.0"

# ===== GEOGRAPHIC DATA PROCESSING =====
geopy = "^2.4.1"
pycountry = "^24.6.1"
hvac = "^2.3.0"

[tool.poetry.group.trends.dependencies]
# ===== LIVE TREND DATA FEED SYSTEM =====
google-trends-api = "^2.2.6"
google-api-python-client = "^2.110.0"
google-auth-oauthlib = "^1.1.0"
tweepy = "^4.14.0"
pytok = "^1.0.0"

[tool.poetry.group.dev.dependencies]
# ===== TESTING FRAMEWORK =====
pytest = "^7.4.4"
pytest-asyncio = "^0.23.2"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.5.0"
pytest-benchmark = "^4.0.0"
pytest-timeout = "^2.1.0"
pytest-mock = "^3.12.0"
pytest-postgresql = "^5.0.0"
pytest-redis = "^3.1.0"
pytest-html = "^4.1.1"
pytest-json-report = "^1.5.0"
pytest-watch = "^4.2.0"
pytest-sugar = "^0.9.7"
pytest-clarity = "^1.0.1"
fakeredis = "^2.20.1"
factory-boy = "^3.3.0"
faker = "^22.0.0"
freezegun = "^1.4.0"
responses = "^0.24.1"
testcontainers = "^3.7.1"

# ===== SECURITY TESTING =====
safety = "^2.3.5"
bandit = "^1.7.5"
pip-audit = "^2.6.1"

# ===== LOAD TESTING =====
locust = "^2.20.0"

# ===== COVERAGE & REPORTING =====
coverage = "^7.3.4"

# ===== DEVELOPMENT TOOLS =====
black = "^23.12.1"
isort = "^5.13.2"
mypy = "^1.8.0"
flake8 = "^7.0.0"
ruff = "^0.1.0"
pre-commit = "^3.6.0"
pylint = "^2.17.0"

# ===== DEBUGGING AND PROFILING =====
ipdb = "^0.13.0"
memory-profiler = "^0.61.0"
line-profiler = "^4.0.0"
memray = "^1.11.0"  # Phase 5: Advanced memory profiling with flame graphs

# ===== JUPYTER FOR EXPLORATION =====
jupyter = "^1.0.0"
ipykernel = "^6.25.0"

# ===== CODE COMPLEXITY ANALYSIS =====
radon = "^6.0.0"
xenon = "^0.9.0"

# ===== DEPENDENCY MANAGEMENT TOOLS =====
pipreqs = "^0.4.0"
pip-tools = "^7.0.0"

# ===== CLI DEVELOPMENT =====
click = "^8.1.0"
typer = "^0.9.0"
psycopg = {extras = ["binary"], version = "^3.2.10"}

[tool.poetry.group.docs.dependencies]
# ===== DOCUMENTATION =====
sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"

[tool.poetry.group.cloud.dependencies]
# ===== CLOUD & DEPLOYMENT (OPTIONAL) =====
boto3 = "^1.34.0"
azure-storage-blob = "^12.19.0"
google-cloud-storage = "^2.13.0"
kubernetes = "^28.1.0"

[tool.poetry.group.monitoring.dependencies]
# ===== ADVANCED MONITORING (OPTIONAL) =====
newrelic = "^9.4.0"
datadog = "^0.49.1"

[tool.poetry.group.messaging.dependencies]
# ===== MESSAGE QUEUES (OPTIONAL) =====
aiokafka = "^0.10.0"
confluent-kafka = "^2.3.0"

[tool.poetry.group.search.dependencies]
# ===== SEARCH & INDEXING (OPTIONAL) =====
elasticsearch = "^8.12.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ===== TOOL CONFIGURATIONS =====

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | mcp-env
  | test_env
  | _build
  | buck-out
  | build
  | dist
  | security_backups
  | backups
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["fastapi", "uvicorn", "pydantic", "sqlalchemy", "redis"]
skip_glob = ["venv/*", ".venv/*", "mcp-env/*", "test_env/*", "security_backups/*", "backups/*"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "mcp-env",
    "test_env",
    "security_backups",
    "backups",
    "build",
    "dist",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "aioredis.*",
    "sqlalchemy.*",
    "asyncpg.*",
    "msgpack.*",
    "cbor2.*",
]
ignore_missing_imports = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "mcp-env",
    "test_env",
    "security_backups",
    "backups",
    "black_env",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't combine pycodestyle and Pyflakes' rules into a single
# category. Instead, Ruff maintains separate categories for each tool.
select = [
    "E4",   # pycodestyle errors
    "E7",   # pycodestyle errors
    "E9",   # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "Q",    # flake8-quotes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "S",    # flake8-bandit
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible REDACTED_SECRETs
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow magic values
    "PLR2004",
    # Ignore docstring requirements
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    # Allow print statements in tests and scripts
    "T201",
    # Allow relative imports
    "TID252",
    # Disable COM812 to avoid conflicts with Ruff formatter
    "COM812",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*.py" = [
    "S101",    # assert
    "S106",    # hardcoded REDACTED_SECRET
    "PLR2004", # magic value
    "TID252",  # relative import
    "D",       # docstrings
]
# Allow magic values in scripts
"scripts/**/*.py" = [
    "PLR2004", # magic value
    "D",       # docstrings
]

[tool.ruff.lint.isort]
known-first-party = ["src", "tests", "scripts"]
force-single-line = false

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "mcp-env", "test_env", "security_backups", "backups"]
skips = ["B101", "B601"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",  # Show extra test summary info for all except passed
    "-v",   # Verbose output
    "--strict-markers",  # Require all markers to be defined
    "--strict-config",   # Require all config options to be valid
    "--tb=short",        # Short traceback format
    "--maxfail=5",       # Stop after 5 failures
    "--durations=10",    # Show 10 slowest tests
    "--cov=src",         # Coverage on src directory
    "--cov-report=term-missing",  # Show missing lines in terminal
    "--cov-report=html:htmlcov",  # Generate HTML coverage report
    "--cov-report=xml",           # Generate XML coverage report for CI
    "--cov-fail-under=80",        # Fail if coverage below 80%
    "--asyncio-mode=auto",        # Auto-detect async tests
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test markers following Testing Pyramid: Unit (70%) -> Integration (20%) -> E2E (10%)
markers = [
    # Unit Tests (70% of tests) - Fast, isolated, comprehensive
    "unit: Unit tests - test individual functions/methods in isolation",
    "unit_functional: Unit tests for normal operation paths",
    "unit_edge_case: Unit tests for boundary conditions and edge cases",
    "unit_error_handling: Unit tests for error scenarios and exception handling",
    "unit_performance: Unit tests for algorithm efficiency and performance",

    # Integration Tests (20% of tests) - Service interactions, real dependencies
    "integration: Integration tests - test service-to-service interactions",
    "integration_database: Integration tests with database dependencies",
    "integration_cache: Integration tests with cache system",
    "integration_message_bus: Integration tests with message queue",
    "integration_api: Integration tests with external APIs",
    "integration_auth: Integration tests with authentication system",

    # End-to-End Tests (10% of tests) - Complete workflows, user journeys
    "e2e: End-to-end tests - complete user workflows",
    "e2e_user_journey: E2E tests for complete user journeys",
    "e2e_performance: E2E tests for performance under load",
    "e2e_reliability: E2E tests for system reliability",
    "e2e_user_experience: E2E tests for user experience validation",

    # Test Categories
    "slow: Slow running tests (> 5 seconds)",
    "requires_db: Tests requiring database connection",
    "requires_redis: Tests requiring Redis connection",
    "requires_network: Tests requiring network access",
    "requires_external_api: Tests requiring external API access",

    # Test Types
    "smoke: Smoke tests - basic functionality verification",
    "regression: Regression tests - prevent regression of fixed bugs",
    "security: Security tests - authentication, authorization, data protection",
    "performance: Performance tests - response time, throughput, resource usage",
    "load: Load tests - system behavior under high load",
    "stress: Stress tests - system behavior under extreme conditions",
]

asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Test timeout configuration
timeout = 300  # 5 minutes default timeout
timeout_method = "thread"

# Test filtering and warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:sklearn.*",
    "ignore::UserWarning:pandas.*",
    "ignore::UserWarning:matplotlib.*",
    "ignore::RuntimeWarning:asyncio.*",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]

# Test discovery configuration
norecursedirs = [
    "venv", ".venv", "mcp-env", "test_env", "black_env",
    "node_modules", "dist", "build", ".git", "__pycache__",
    "security_backups", "backups", ".pytest_cache"
]

# Note: Parallel execution configured via script arguments using pytest-xdist

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/mcp-env/*",
    "*/test_env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]