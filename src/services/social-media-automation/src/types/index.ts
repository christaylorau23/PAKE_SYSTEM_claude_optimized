/**
 * PAKE System - Social Media Automation Types
 * Comprehensive type definitions for multi-platform social media automation
 */

export interface SocialMediaPost {
  id: string;
  platforms: SocialPlatform[];
  content: PostContent;
  scheduledAt?: Date;
  publishedAt?: Date;
  status: PostStatus;
  analytics?: PostAnalytics;
  metadata: PostMetadata;
}

export interface PostContent {
  text: string;
  images?: MediaAsset[];
  videos?: MediaAsset[];
  hashtags?: string[];
  mentions?: string[];
  links?: LinkPreview[];
  poll?: PollData;
}

export interface MediaAsset {
  id: string;
  url: string;
  type: 'image' | 'video' | 'gif';
  altText?: string;
  dimensions?: {
    width: number;
    height: number;
  };
  metadata: Record<string, unknown>;
}

export interface LinkPreview {
  url: string;
  title?: string;
  description?: string;
  image?: string;
  domain?: string;
}

export interface PollData {
  question: string;
  options: string[];
  duration?: number; // hours
  multipleChoice?: boolean;
}

export interface PostMetadata {
  createdBy: string;
  campaign?: string;
  tags?: string[];
  priority: PostPriority;
  autoGenerated?: boolean;
  sourceTemplate?: string;
  approvalRequired?: boolean;
  contentType: ContentType;
}

export enum SocialPlatform {
  TWITTER = 'twitter',
  LINKEDIN = 'linkedin',
  INSTAGRAM = 'instagram',
  FACEBOOK = 'facebook',
  YOUTUBE = 'youtube',
  TIKTOK = 'tiktok',
}

export enum PostStatus {
  DRAFT = 'draft',
  SCHEDULED = 'scheduled',
  PENDING_APPROVAL = 'pending_approval',
  APPROVED = 'approved',
  PUBLISHING = 'publishing',
  PUBLISHED = 'published',
  FAILED = 'failed',
  DELETED = 'deleted',
}

export enum PostPriority {
  LOW = 0,
  NORMAL = 1,
  HIGH = 2,
  URGENT = 3,
}

export enum ContentType {
  ORIGINAL = 'original',
  CURATED = 'curated',
  AI_GENERATED = 'ai_generated',
  USER_GENERATED = 'user_generated',
  PROMOTIONAL = 'promotional',
  NEWS = 'news',
  EDUCATIONAL = 'educational',
  ENTERTAINMENT = 'entertainment',
}

export interface PostAnalytics {
  platformData: Record<SocialPlatform, PlatformAnalytics>;
  aggregated: AggregatedAnalytics;
  lastUpdated: Date;
}

export interface PlatformAnalytics {
  platform: SocialPlatform;
  postId?: string;
  metrics: {
    impressions?: number;
    reach?: number;
    engagements?: number;
    likes?: number;
    shares?: number;
    comments?: number;
    clicks?: number;
    saves?: number;
    profileVisits?: number;
    followsFromPost?: number;
  };
  demographic?: DemographicData;
  performance: PerformanceScore;
}

export interface AggregatedAnalytics {
  totalImpressions: number;
  totalEngagements: number;
  engagementRate: number;
  bestPerformingPlatform: SocialPlatform;
  overallScore: number;
}

export interface DemographicData {
  ageGroups: Record<string, number>;
  genders: Record<string, number>;
  locations: Record<string, number>;
  interests: Record<string, number>;
}

export interface PerformanceScore {
  score: number; // 0-100
  category: 'poor' | 'fair' | 'good' | 'excellent';
  factors: {
    timing: number;
    content: number;
    engagement: number;
    reach: number;
  };
}

export interface PlatformConfig {
  platform: SocialPlatform;
  credentials: PlatformCredentials;
  settings: PlatformSettings;
  limits: PlatformLimits;
  features: PlatformFeatures;
}

export interface PlatformCredentials {
  apiKey?: string;
  apiSecret?: string;
  accessToken?: string;
  accessTokenSecret?: string;
  refreshToken?: string;
  clientId?: string;
  clientSecret?: string;
  username?: string;
  userId?: string;
}

export interface PlatformSettings {
  enabled: boolean;
  autoPost: boolean;
  requireApproval: boolean;
  defaultHashtags?: string[];
  timezone: string;
  optimalPostTimes?: string[];
  contentFilters: ContentFilter[];
}

export interface PlatformLimits {
  maxTextLength: number;
  maxImages: number;
  maxVideos: number;
  maxHashtags: number;
  maxMentions: number;
  dailyPostLimit: number;
  hourlyPostLimit: number;
  imageFormats: string[];
  videoFormats: string[];
  maxImageSize: number;
  maxVideoSize: number;
  maxVideoDuration: number;
}

export interface PlatformFeatures {
  supportsImages: boolean;
  supportsVideos: boolean;
  supportsPolls: boolean;
  supportsStories: boolean;
  supportsThreads: boolean;
  supportsScheduling: boolean;
  supportsHashtags: boolean;
  supportsMentions: boolean;
  supportsLinks: boolean;
  supportsLinkPreviews: boolean;
}

export interface ContentFilter {
  type: 'profanity' | 'spam' | 'sensitive' | 'copyright' | 'custom';
  enabled: boolean;
  strictness: 'low' | 'medium' | 'high';
  customRules?: string[];
}

export interface Campaign {
  id: string;
  name: string;
  description: string;
  startDate: Date;
  endDate?: Date;
  platforms: SocialPlatform[];
  posts: string[]; // Post IDs
  budget?: number;
  goals: CampaignGoal[];
  status: CampaignStatus;
  analytics: CampaignAnalytics;
  metadata: Record<string, unknown>;
}

export interface CampaignGoal {
  type: 'awareness' | 'engagement' | 'traffic' | 'leads' | 'sales';
  target: number;
  current: number;
  unit: string;
}

export enum CampaignStatus {
  DRAFT = 'draft',
  ACTIVE = 'active',
  PAUSED = 'paused',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled',
}

export interface CampaignAnalytics {
  totalPosts: number;
  totalImpressions: number;
  totalEngagements: number;
  avgEngagementRate: number;
  reachGrowth: number;
  followersGained: number;
  websiteClicks: number;
  costPerEngagement?: number;
  roi?: number;
  platformBreakdown: Record<SocialPlatform, number>;
}

export interface ContentTemplate {
  id: string;
  name: string;
  description: string;
  category: ContentType;
  template: string; // Template string with placeholders
  platforms: SocialPlatform[];
  variables: TemplateVariable[];
  examples: string[];
  tags: string[];
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface TemplateVariable {
  name: string;
  type: 'text' | 'number' | 'date' | 'url' | 'hashtag' | 'mention';
  required: boolean;
  default?: string;
  description: string;
  validation?: string; // Regex pattern
}

export interface AIContentRequest {
  prompt: string;
  contentType: ContentType;
  platforms: SocialPlatform[];
  tone: ContentTone;
  length: ContentLength;
  includeHashtags: boolean;
  includeEmojis: boolean;
  keywords?: string[];
  targetAudience?: string;
  context?: string;
}

export enum ContentTone {
  PROFESSIONAL = 'professional',
  CASUAL = 'casual',
  FRIENDLY = 'friendly',
  HUMOROUS = 'humorous',
  INSPIRATIONAL = 'inspirational',
  EDUCATIONAL = 'educational',
  PROMOTIONAL = 'promotional',
  URGENT = 'urgent',
}

export enum ContentLength {
  SHORT = 'short',
  MEDIUM = 'medium',
  LONG = 'long',
}

export interface SchedulingRule {
  id: string;
  name: string;
  platforms: SocialPlatform[];
  timezone: string;
  schedule: SchedulePattern[];
  contentFilters: ContentFilter[];
  enabled: boolean;
  priority: number;
}

export interface SchedulePattern {
  dayOfWeek: number; // 0-6, Sunday = 0
  times: string[]; // HH:mm format
  maxPosts: number;
  minInterval: number; // minutes between posts
}

export interface QueueJob {
  id: string;
  type: JobType;
  data: unknown;
  priority: PostPriority;
  attempts: number;
  maxAttempts: number;
  delay?: number;
  scheduledAt?: Date;
  createdAt: Date;
  updatedAt: Date;
  status: JobStatus;
  error?: string;
  result?: unknown;
}

export enum JobType {
  PUBLISH_POST = 'publish_post',
  DELETE_POST = 'delete_post',
  UPDATE_POST = 'update_post',
  FETCH_ANALYTICS = 'fetch_analytics',
  GENERATE_CONTENT = 'generate_content',
  MODERATE_CONTENT = 'moderate_content',
  SCHEDULE_POSTS = 'schedule_posts',
  CLEANUP_EXPIRED = 'cleanup_expired',
}

export enum JobStatus {
  WAITING = 'waiting',
  ACTIVE = 'active',
  COMPLETED = 'completed',
  FAILED = 'failed',
  DELAYED = 'delayed',
  PAUSED = 'paused',
}

export interface ServiceMetrics {
  posts: {
    total: number;
    scheduled: number;
    published: number;
    failed: number;
    byPlatform: Record<SocialPlatform, number>;
    byStatus: Record<PostStatus, number>;
  };
  platforms: {
    connected: SocialPlatform[];
    healthy: SocialPlatform[];
    errors: Record<SocialPlatform, string>;
  };
  queue: {
    waiting: number;
    active: number;
    completed: number;
    failed: number;
    throughput: number; // jobs per hour
  };
  analytics: {
    totalImpressions: number;
    totalEngagements: number;
    avgEngagementRate: number;
    topPerformingPost: string;
    trending: {
      hashtags: string[];
      topics: string[];
    };
  };
}

export interface WebhookEvent {
  id: string;
  type: WebhookEventType;
  platform: SocialPlatform;
  postId?: string;
  data: unknown;
  timestamp: Date;
  processed: boolean;
}

export enum WebhookEventType {
  POST_PUBLISHED = 'post_published',
  POST_FAILED = 'post_failed',
  POST_DELETED = 'post_deleted',
  ENGAGEMENT_RECEIVED = 'engagement_received',
  FOLLOWER_GAINED = 'follower_gained',
  MENTION_RECEIVED = 'mention_received',
  MESSAGE_RECEIVED = 'message_received',
  ACCOUNT_UPDATED = 'account_updated',
}

export interface ServiceConfig {
  port: number;
  environment: string;
  logLevel: string;
  corsOrigins: string[];
  rateLimiting: {
    windowMs: number;
    maxRequests: number;
  };
  redis: {
    url: string;
    keyPrefix: string;
  };
  queue: {
    concurrency: number;
    retryDelay: number;
    maxRetries: number;
    cleanupInterval: number;
  };
  ai: {
    openai?: {
      apiKey: string;
      model: string;
    };
    anthropic?: {
      apiKey: string;
      model: string;
    };
  };
  platforms: Record<SocialPlatform, PlatformConfig>;
  content: {
    moderationEnabled: boolean;
    autoHashtagsEnabled: boolean;
    maxHashtagsPerPost: number;
    imageOptimizationEnabled: boolean;
    videoTranscodingEnabled: boolean;
  };
  scheduling: {
    enabled: boolean;
    lookAheadDays: number;
    batchSize: number;
  };
  analytics: {
    enabled: boolean;
    fetchInterval: number;
    retentionDays: number;
  };
  webhooks: {
    enabled: boolean;
    secret: string;
    endpoints: Record<SocialPlatform, string>;
  };
}

export interface Error extends globalThis.Error {
  code?: string;
  statusCode?: number;
  platform?: SocialPlatform;
  postId?: string;
  retryable?: boolean;
  details?: Record<string, any>;
}

export type SocialMediaProvider =
  | 'twitter'
  | 'linkedin'
  | 'instagram'
  | 'facebook'
  | 'youtube'
  | 'tiktok';
export type MediaType = 'image' | 'video' | 'gif';
export type EngagementType = 'like' | 'share' | 'comment' | 'save' | 'click';
export type NotificationType =
  | 'mention'
  | 'reply'
  | 'follow'
  | 'like'
  | 'share';
