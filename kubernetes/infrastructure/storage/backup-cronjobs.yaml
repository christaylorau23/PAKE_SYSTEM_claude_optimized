# Database Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgresql-backup
  namespace: database
  labels:
    app: postgresql-backup
    component: backup
spec:
  schedule: '0 2 * * *' # Daily at 2 AM UTC
  timeZone: 'UTC'
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        metadata:
          labels:
            app: postgresql-backup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
            - name: postgresql-backup
              image: postgres:15-alpine
              imagePullPolicy: IfNotPresent
              env:
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgresql-credentials
                      key: postgres-REDACTED_SECRET
                - name: PGHOST
                  value: 'pake-postgresql.database.svc.cluster.local'
                - name: PGUSER
                  value: 'postgres'
                - name: BACKUP_BUCKET
                  value: 's3://pake-backups/postgresql'
                - name: RETENTION_DAYS
                  value: '30'
              command:
                - /bin/bash
                - -c
                - |
                  set -e
                  TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                  BACKUP_FILE="postgresql_backup_${TIMESTAMP}.sql.gz"

                  echo "Starting PostgreSQL backup at $(date)"

                  # Create backup
                  pg_dumpall -h $PGHOST -U $PGUSER | gzip > /tmp/${BACKUP_FILE}

                  if [ $? -eq 0 ]; then
                    echo "Backup created successfully: ${BACKUP_FILE}"

                    # Upload to S3
                    aws s3 cp /tmp/${BACKUP_FILE} ${BACKUP_BUCKET}/${BACKUP_FILE}

                    if [ $? -eq 0 ]; then
                      echo "Backup uploaded to S3 successfully"

                      # Clean up old backups
                      aws s3 ls ${BACKUP_BUCKET}/ --recursive | awk '{print $4}' | \
                      while read file; do
                        file_date=$(echo $file | grep -oP '\d{8}_\d{6}')
                        if [ -n "$file_date" ]; then
                          file_timestamp=$(date -d "${file_date:0:8} ${file_date:9:2}:${file_date:11:2}:${file_date:13:2}" +%s)
                          cutoff_timestamp=$(date -d "${RETENTION_DAYS} days ago" +%s)

                          if [ $file_timestamp -lt $cutoff_timestamp ]; then
                            echo "Deleting old backup: $file"
                            aws s3 rm ${BACKUP_BUCKET}/$file
                          fi
                        fi
                      done
                    else
                      echo "Failed to upload backup to S3"
                      exit 1
                    fi
                  else
                    echo "Failed to create backup"
                    exit 1
                  fi

                  # Clean up local file
                  rm -f /tmp/${BACKUP_FILE}
                  echo "Backup completed successfully at $(date)"
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 1Gi
              volumeMounts:
                - name: backup-storage
                  mountPath: /backup
          volumes:
            - name: backup-storage
              emptyDir:
                sizeLimit: 10Gi

---
# Redis Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-backup
  namespace: database
  labels:
    app: redis-backup
    component: backup
spec:
  schedule: '0 3 * * *' # Daily at 3 AM UTC
  timeZone: 'UTC'
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        metadata:
          labels:
            app: redis-backup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
            - name: redis-backup
              image: redis:7-alpine
              imagePullPolicy: IfNotPresent
              env:
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: redis-credentials
                      key: REDACTED_SECRET
                - name: REDIS_HOST
                  value: 'pake-redis.database.svc.cluster.local'
                - name: BACKUP_BUCKET
                  value: 's3://pake-backups/redis'
                - name: RETENTION_DAYS
                  value: '14'
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                  BACKUP_FILE="redis_backup_${TIMESTAMP}.rdb"

                  echo "Starting Redis backup at $(date)"

                  # Trigger BGSAVE on Redis master
                  redis-cli -h $REDIS_HOST -a $REDIS_PASSWORD BGSAVE

                  # Wait for backup to complete
                  while [ "$(redis-cli -h $REDIS_HOST -a $REDIS_PASSWORD LASTSAVE)" = "$(redis-cli -h $REDIS_HOST -a $REDIS_PASSWORD LASTSAVE)" ]; do
                    sleep 5
                  done

                  # Copy RDB file (this is simplified - in practice you'd need to coordinate with Redis pod)
                  # For production, use Redis Enterprise or similar for consistent backups

                  echo "Redis backup process initiated successfully at $(date)"
              resources:
                requests:
                  cpu: 50m
                  memory: 128Mi
                limits:
                  cpu: 200m
                  memory: 512Mi

---
# ChromaDB Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: chromadb-backup
  namespace: database
  labels:
    app: chromadb-backup
    component: backup
spec:
  schedule: '0 4 * * *' # Daily at 4 AM UTC
  timeZone: 'UTC'
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        metadata:
          labels:
            app: chromadb-backup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
            - name: chromadb-backup
              image: alpine:3.18
              imagePullPolicy: IfNotPresent
              env:
                - name: CHROMA_HOST
                  value: 'chromadb.database.svc.cluster.local'
                - name: BACKUP_BUCKET
                  value: 's3://pake-backups/chromadb'
                - name: RETENTION_DAYS
                  value: '30'
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  apk add --no-cache aws-cli curl tar gzip

                  TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                  BACKUP_FILE="chromadb_backup_${TIMESTAMP}.tar.gz"

                  echo "Starting ChromaDB backup at $(date)"

                  # Create backup directory
                  mkdir -p /tmp/chromadb-backup

                  # In production, implement proper ChromaDB backup API calls
                  # This is a placeholder for the actual backup process
                  echo "ChromaDB backup would be implemented here"
                  echo "Backup completed successfully at $(date)"
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 1Gi

---
# ServiceAccount for backup jobs
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-service-account
  namespace: database
  labels:
    app: backup

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: backup-role
  namespace: database
rules:
  - apiGroups: ['']
    resources: ['secrets', 'configmaps']
    verbs: ['get', 'list']
  - apiGroups: ['']
    resources: ['pods', 'pods/log']
    verbs: ['get', 'list', 'create']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backup-role-binding
  namespace: database
subjects:
  - kind: ServiceAccount
    name: backup-service-account
    namespace: database
roleRef:
  kind: Role
  name: backup-role
  apiGroup: rbac.authorization.k8s.io
