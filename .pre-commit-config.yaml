# Pre-commit hooks configuration
# Optimized for fast feedback and comprehensive coverage
# This runs locally before commits are pushed to catch issues early

repos:
  # ============================================================================
  # FAST FORMATTING & LINTING (Run first for quick feedback)
  # ============================================================================

  # General file checks (fastest)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: \.(md|rst)$
      - id: end-of-file-fixer
        exclude: \.(md|rst)$
      - id: check-yaml
        args: [--unsafe]  # Allow custom tags
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]  # 1MB limit
      - id: check-case-conflict
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: check-docstring-first
        exclude: ^(tests/|scripts/|migrations/)
      - id: debug-statements
      - id: check-ast
      - id: check-merge-conflict

  # Python code formatting (fast)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.8
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        exclude: ^(migrations/|venv/|\.venv/|mcp-env/|test_env/)
      - id: ruff-format
        args: [--exit-non-zero-on-fix]

  # Black formatting (backup for ruff-format)
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.12
        exclude: ^(migrations/|venv/|\.venv/|mcp-env/|test_env/)

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --check-only]
        exclude: ^(migrations/|venv/|\.venv/|mcp-env/|test_env/)

  # ============================================================================
  # TYPE CHECKING & STATIC ANALYSIS (Medium speed)
  # ============================================================================

  # MyPy type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [--strict, --show-error-codes, --ignore-missing-imports]
        exclude: ^(tests/|scripts/|migrations/|venv/|\.venv/|mcp-env/|test_env/)

  # ============================================================================
  # SECURITY SCANNING (Slower but critical)
  # ============================================================================

  # Secret detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: ^(migrations/|venv/|\.venv/|mcp-env/|test_env/)

  # Git history secret scanning
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.0
    hooks:
      - id: gitleaks
        args: [--verbose]

  # Bandit security analysis
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, src/, -f, json, -o, bandit-report.json]
        exclude: ^(tests/|migrations/|venv/|\.venv/|mcp-env/|test_env/)

  # ============================================================================
  # FRONTEND CODE QUALITY (TypeScript/JavaScript)
  # ============================================================================

  # ESLint for TypeScript/JavaScript
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        files: \.(js|ts|jsx|tsx)$
        additional_dependencies:
          - eslint@8.56.0
          - "@typescript-eslint/eslint-plugin@8.44.0"
          - "@typescript-eslint/parser@8.44.0"
        args: [--fix, --max-warnings=0]

  # Prettier for frontend formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        files: \.(js|ts|jsx|tsx|json|css|scss|md|yaml|yml)$
        exclude: ^(node_modules/|dist/|build/|coverage/)

  # ============================================================================
  # CUSTOM SECURITY & VALIDATION CHECKS
  # ============================================================================

  - repo: local
    hooks:
      # Hardcoded secrets check
      - id: check-hardcoded-secrets
        name: Check for hardcoded secrets
        entry: python scripts/check_hardcoded_secrets.py
        language: system
        files: \.(py|js|ts|yaml|yml|json)$
        pass_filenames: true
        exclude: ^(migrations/|venv/|\.venv/|mcp-env/|test_env/)

      # Environment variable validation
      - id: validate-env-vars
        name: Validate environment variable usage
        entry: python scripts/validate_secrets_manager.py
        language: system
        files: \.(py)$
        pass_filenames: true
        exclude: ^(migrations/|venv/|\.venv/|mcp-env/|test_env/)

      # Security vulnerability check
      - id: security-audit
        name: Security audit
        entry: python scripts/security_audit.py
        language: system
        files: \.(py)$
        pass_filenames: true
        exclude: ^(migrations/|venv/|\.venv/|mcp-env/|test_env/)

      # Dependency vulnerability check
      - id: pip-audit
        name: Python dependency audit
        entry: poetry run pip-audit --format=json
        language: system
        files: pyproject.toml
        pass_filenames: false

  # ============================================================================
  # OPTIONAL: TEST EXECUTION (Slowest - can be disabled for speed)
  # ============================================================================

  # Quick unit tests (only if --all-files is used)
  - repo: local
    hooks:
      - id: quick-tests
        name: Quick unit tests
        entry: python scripts/quick_tests.py
        language: system
        files: \.(py)$
        pass_filenames: true
        exclude: ^(migrations/|venv/|\.venv/|mcp-env/|test_env/)
        stages: [manual]  # Only run with --all-files flag