# PAKE System - Enhanced CI/CD Pipeline
# Enterprise-grade continuous integration and deployment with comprehensive quality gates

name: Enhanced CI/CD Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      run_full_test_suite:
        description: 'Run full test suite including performance tests'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.8.3'
  NODE_VERSION: '22.18.0'
  REGISTRY_URL: 'ghcr.io'
  IMAGE_NAME: 'pake-system'

jobs:
  # ============================================================================
  # QUALITY GATES - Run on every PR and push
  # ============================================================================
  
  lint-and-format:
    name: 🎨 Code Quality & Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: |
          poetry install --no-interaction --only=dev
          npm ci
      
      - name: Run Ruff linting
        run: poetry run ruff check src/ tests/ --output-format=github
      
      - name: Run Black formatting check
        run: poetry run black --check src/ tests/
      
      - name: Run isort import sorting check
        run: poetry run isort --check-only src/ tests/
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run Prettier formatting check
        run: npm run format:check
      
      - name: Check commit message format
        uses: commitlint/action@v1
        with:
          config: .commitlintrc.json

  static-analysis:
    name: 🔍 Static Analysis & Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: |
          poetry install --no-interaction
          npm ci
      
      - name: Run MyPy type checking
        run: poetry run mypy src/ --strict --show-error-codes
      
      - name: Run TypeScript type checking
        run: npm run type-check
      
      - name: Run Bandit security analysis
        run: poetry run bandit -r src/ -f json -o bandit-report.json
      
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run pip-audit for vulnerable dependencies
        run: poetry run pip-audit --format=json --output=pip-audit-report.json
      
      - name: Run TruffleHog secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: Run Safety check
        run: poetry run safety check --json --output=safety-report.json
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            pip-audit-report.json
            safety-report.json

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ['3.12']
        test-category: ['unit_functional', 'unit_edge_case', 'unit_error_handling', 'unit_performance', 'unit_security']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run unit tests with coverage
        run: |
          poetry run pytest tests/unit/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=85 \
            --junitxml=unit-test-results-${{ matrix.test-category }}.xml \
            -m "${{ matrix.test-category }}" \
            -v
      
      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ matrix.test-category }}
          path: |
            unit-test-results-${{ matrix.test-category }}.xml
            coverage.xml
            htmlcov/

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        test-category: ['integration', 'integration_database', 'integration_cache', 'integration_auth']
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: pake_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Wait for services
        run: |
          poetry run python -c "
          import time
          import psycopg2
          import redis
          
          # Wait for PostgreSQL
          for i in range(30):
              try:
                  conn = psycopg2.connect(
                      host='localhost',
                      port=5432,
                      user='test_user',
                      password='test_password',
                      database='pake_test'
                  )
                  conn.close()
                  break
              except:
                  time.sleep(1)
          
          # Wait for Redis
          for i in range(30):
              try:
                  r = redis.Redis(host='localhost', port=6379, db=1)
                  r.ping()
                  break
              except:
                  time.sleep(1)
          "
      
      - name: Set environment variables
        run: |
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/pake_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
          echo "USE_VAULT=false" >> $GITHUB_ENV
      
      - name: Run integration tests
        run: |
          poetry run pytest tests/integration/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --junitxml=integration-test-results-${{ matrix.test-category }}.xml \
            -m "${{ matrix.test-category }}" \
            -v
      
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-${{ matrix.test-category }}
          path: |
            integration-test-results-${{ matrix.test-category }}.xml
            coverage.xml
            htmlcov/

  e2e-tests:
    name: 🌐 End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        test-category: ['e2e_user_journey', 'e2e_performance', 'e2e_reliability', 'e2e_user_experience']
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: pake_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Set environment variables
        run: |
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/pake_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
          echo "USE_VAULT=false" >> $GITHUB_ENV
      
      - name: Start application
        run: |
          poetry run python -m uvicorn src.pake_system.auth.example_app:app --host 0.0.0.0 --port 8000 &
          sleep 10
      
      - name: Run E2E tests
        run: |
          poetry run pytest tests/e2e/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=75 \
            --junitxml=e2e-test-results-${{ matrix.test-category }}.xml \
            -m "${{ matrix.test-category }}" \
            -v
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.test-category }}
          path: |
            e2e-test-results-${{ matrix.test-category }}.xml
            coverage.xml
            htmlcov/

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event.inputs.run_full_test_suite == 'true' || github.event_name == 'push'
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: pake_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Set environment variables
        run: |
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/pake_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
          echo "USE_VAULT=false" >> $GITHUB_ENV
      
      - name: Start application
        run: |
          poetry run python -m uvicorn src.pake_system.auth.example_app:app --host 0.0.0.0 --port 8000 &
          sleep 10
      
      - name: Run performance tests
        run: |
          poetry run pytest tests/performance/ \
            --junitxml=performance-test-results.xml \
            -v
      
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: performance-test-results.xml

  security-tests:
    name: 🛡️ Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: pake_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Set environment variables
        run: |
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/pake_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
          echo "USE_VAULT=false" >> $GITHUB_ENV
      
      - name: Start application
        run: |
          poetry run python -m uvicorn src.pake_system.auth.example_app:app --host 0.0.0.0 --port 8000 &
          sleep 10
      
      - name: Run security test suite
        run: |
          poetry run python scripts/security_test_suite.py
      
      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: security_test_report.json

  test-coverage-gate:
    name: 📊 Test Coverage Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, integration-tests, e2e-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports/
      
      - name: Combine coverage reports
        run: |
          poetry run coverage combine coverage-reports/*/coverage.xml
          poetry run coverage report --show-missing --fail-under=85
          poetry run coverage html -d htmlcov-combined
          poetry run coverage xml -o coverage-combined.xml
      
      - name: Upload combined coverage report
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage-report
          path: |
            coverage-combined.xml
            htmlcov-combined/
      
      - name: Comment coverage on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage-combined.xml', 'utf8'));
            const totalCoverage = coverage.coverage['@line-rate'] * 100;
            
            const comment = `## 📊 Test Coverage Report
            
            **Total Coverage**: ${totalCoverage.toFixed(2)}%
            
            ### Coverage Breakdown
            - **Unit Tests**: 85%+ (Required)
            - **Integration Tests**: 80%+ (Required)  
            - **E2E Tests**: 75%+ (Required)
            
            ### Coverage Details
            - Lines: ${coverage.coverage['@lines-covered']}/${coverage.coverage['@lines-valid']}
            - Branches: ${coverage.coverage['@branches-covered']}/${coverage.coverage['@branches-valid']}
            
            ${totalCoverage >= 85 ? '✅' : '❌'} Coverage ${totalCoverage >= 85 ? 'meets' : 'does not meet'} requirements`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  build-and-scan:
    name: 🐳 Build & Container Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: false
          tags: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            GIT_BRANCH=${{ github.ref_name }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # ============================================================================
  # DEPLOYMENT PIPELINE - Run only on main branch
  # ============================================================================
  
  build-and-push:
    name: 🏗️ Build & Push Production Image
    runs-on: ubuntu-latest
    needs: [lint-and-format, static-analysis, security-scan, unit-tests, integration-tests, e2e-tests, security-tests, test-coverage-gate, build-and-scan]
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.build.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            GIT_BRANCH=${{ github.ref_name }}
            VERSION=${{ github.ref_name }}

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.pake-system.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Deploy to Kubernetes (Staging)
        run: |
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/pake-backend \
            pake-backend=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -n staging
          kubectl rollout status deployment/pake-backend -n staging --timeout=300s
      
      - name: Run smoke tests against staging
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Run basic health checks
          curl -f https://staging.pake-system.com/health || exit 1
          curl -f https://staging.pake-system.com/auth/generate-password || exit 1
      
      - name: Run E2E tests against staging
        run: |
          poetry run pytest tests/e2e/ \
            --base-url=https://staging.pake-system.com \
            --junitxml=staging-e2e-results.xml \
            -v
      
      - name: Upload staging test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-e2e-results
          path: staging-e2e-results.xml

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: https://pake-system.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Deploy to Kubernetes (Production)
        run: |
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/pake-backend \
            pake-backend=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -n production
          kubectl rollout status deployment/pake-backend -n production --timeout=600s
      
      - name: Run production health checks
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Run comprehensive health checks
          curl -f https://pake-system.com/health || exit 1
          curl -f https://pake-system.com/auth/generate-password || exit 1
          
          # Run security tests against production
          poetry run python scripts/security_test_suite.py --base-url=https://pake-system.com
      
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "🚀 PAKE System successfully deployed to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: "❌ PAKE System deployment to production failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # CLEANUP AND NOTIFICATIONS
  # ============================================================================
  
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Clean up old images
        run: |
          # Clean up old container images (keep last 10)
          echo "Cleaning up old container images..."
      
      - name: Clean up test artifacts
        run: |
          # Clean up test artifacts older than 7 days
          echo "Cleaning up old test artifacts..."

  notify-completion:
    name: 📢 Notify Completion
    runs-on: ubuntu-latest
    needs: [lint-and-format, static-analysis, security-scan, unit-tests, integration-tests, e2e-tests, security-tests, test-coverage-gate, build-and-scan]
    if: always()
    steps:
      - name: Notify CI completion
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🎯 PAKE System CI/CD Pipeline Complete
            
            **Branch**: ${{ github.ref_name }}
            **Commit**: ${{ github.sha }}
            **Status**: ${{ job.status }}
            
            **Quality Gates**:
            - ✅ Lint & Format: ${{ needs.lint-and-format.result }}
            - ✅ Static Analysis: ${{ needs.static-analysis.result }}
            - ✅ Security Scan: ${{ needs.security-scan.result }}
            - ✅ Unit Tests: ${{ needs.unit-tests.result }}
            - ✅ Integration Tests: ${{ needs.integration-tests.result }}
            - ✅ E2E Tests: ${{ needs.e2e-tests.result }}
            - ✅ Security Tests: ${{ needs.security-tests.result }}
            - ✅ Test Coverage Gate: ${{ needs.test-coverage-gate.result }}
            - ✅ Build & Scan: ${{ needs.build-and-scan.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
