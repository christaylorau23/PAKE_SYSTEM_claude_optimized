# Grafana Stack for PAKE System Observability
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app: grafana
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true

    [grafana_net]
    url = https://grafana.net

    [log]
    mode = console

    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    [server]
    root_url = https://grafana.pake-system.com

    [security]
    admin_user = admin
    admin_REDACTED_SECRET = $__env{GF_SECURITY_ADMIN_PASSWORD}
    secret_key = $__env{GF_SECURITY_SECRET_KEY}

    [auth]
    disable_login_form = false

    [auth.generic_oauth]
    enabled = true
    name = PAKE SSO
    allow_sign_up = true
    client_id = $__env{GF_AUTH_GENERIC_OAUTH_CLIENT_ID}
    client_secret = $__env{GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET}
    scopes = openid profile email groups
    auth_url = https://auth.pake-system.com/oauth/authorize
    token_url = https://auth.pake-system.com/oauth/token
    api_url = https://auth.pake-system.com/oauth/userinfo
    role_attribute_path = contains(groups[*], 'pake-system:admins') && 'Admin' || contains(groups[*], 'pake-system:devops') && 'Editor' || 'Viewer'

    [smtp]
    enabled = true
    host = smtp.pake-system.com:587
    user = alerts@pake-system.com
    REDACTED_SECRET = $__env{GF_SMTP_PASSWORD}
    from_address = alerts@pake-system.com
    from_name = PAKE Grafana

    [alerting]
    enabled = true
    execute_alerts = true

    [unified_alerting]
    enabled = true

    [database]
    type = postgres
    host = $__env{GF_DATABASE_HOST}
    name = $__env{GF_DATABASE_NAME}
    user = $__env{GF_DATABASE_USER}
    REDACTED_SECRET = $__env{GF_DATABASE_PASSWORD}
    ssl_mode = require

  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      jsonData:
        timeInterval: 15s
        queryTimeout: 300s
        httpMethod: POST

    - name: Loki
      type: loki
      access: proxy
      url: http://loki:3100
      jsonData:
        maxLines: 1000

    - name: Jaeger
      type: jaeger
      access: proxy
      url: http://jaeger-query:16686
      jsonData:
        tracesToLogs:
          datasourceUid: loki
          tags: ['job', 'instance', 'pod', 'namespace']
          mappedTags: [{ key: 'service.name', value: 'service' }]
          mapTagNamesEnabled: false
          spanStartTimeShift: '1h'
          spanEndTimeShift: '1h'
          filterByTraceID: false
          filterBySpanID: false

    - name: PostgreSQL
      type: postgres
      access: proxy
      url: pake-postgresql.database.svc.cluster.local:5432
      database: pake_production
      user: $GF_DATABASE_USER
      secureJsonData:
        REDACTED_SECRET: $GF_DATABASE_PASSWORD
      jsonData:
        sslmode: require
        postgresVersion: 1500
        timescaledb: false

  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'PAKE Dashboards'
      orgId: 1
      folder: 'PAKE System'
      type: file
      disableDeletion: false
      editable: true
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /etc/grafana/provisioning/dashboards

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      serviceAccountName: grafana
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          imagePullPolicy: IfNotPresent
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-REDACTED_SECRET
            - name: GF_SECURITY_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: secret-key
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: oauth-client-id
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: oauth-client-secret
            - name: GF_DATABASE_HOST
              value: 'pake-postgresql.database.svc.cluster.local:5432'
            - name: GF_DATABASE_NAME
              value: 'grafana'
            - name: GF_DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: db-username
            - name: GF_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: db-REDACTED_SECRET
            - name: GF_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: smtp-REDACTED_SECRET
          ports:
            - containerPort: 3000
              name: grafana
          livenessProbe:
            httpGet:
              path: /api/health
              port: grafana
            initialDelaySeconds: 30
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: grafana
            initialDelaySeconds: 10
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 250m
              memory: 1Gi
          volumeMounts:
            - name: config
              mountPath: /etc/grafana
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: dashboards
              mountPath: /etc/grafana/provisioning/dashboards/pake
            - name: storage
              mountPath: /var/lib/grafana
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
      volumes:
        - name: config
          configMap:
            name: grafana-config
            items:
              - key: grafana.ini
                path: grafana.ini
        - name: datasources
          configMap:
            name: grafana-config
            items:
              - key: datasources.yml
                path: datasources.yml
        - name: dashboards-config
          configMap:
            name: grafana-config
            items:
              - key: dashboards.yml
                path: dashboards.yml
        - name: dashboards
          configMap:
            name: grafana-dashboards
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage
      nodeSelector:
        workload: api-services
        node-type: standard
      tolerations:
        - key: workload
          operator: Equal
          value: api-services
          effect: NoSchedule

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      name: grafana
  selector:
    app: grafana

---
# Grafana Storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 20Gi

---
# Grafana ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana

---
# Grafana Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    cert-manager.io/cluster-issuer: 'letsencrypt-prod'
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - grafana.pake-system.com
      secretName: grafana-tls
  rules:
    - host: grafana.pake-system.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000

---
# Node Exporter DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    app: node-exporter
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
    spec:
      hostNetwork: true
      hostPID: true
      serviceAccountName: node-exporter
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      containers:
        - name: node-exporter
          image: prom/node-exporter:v1.6.0
          imagePullPolicy: IfNotPresent
          args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
            - --path.rootfs=/host/root
            - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
            - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
            - --web.listen-address=0.0.0.0:9100
          ports:
            - containerPort: 9100
              hostPort: 9100
              name: metrics
          livenessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 30
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 10
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly: true
            - name: sys
              mountPath: /host/sys
              readOnly: true
            - name: root
              mountPath: /host/root
              mountPropagation: HostToContainer
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: root
          hostPath:
            path: /
      tolerations:
        - effect: NoSchedule
          operator: Exists

---
# Node Exporter Service
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    app: node-exporter
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9100'
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9100
      targetPort: 9100
      name: metrics
  selector:
    app: node-exporter

---
# Node Exporter ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    app: node-exporter
