# PAKE System - Production Environment Values

# Override default values for production environment
replicaCount: 3

image:
  tag: "c56f99d"

# Environment configuration
env:
  - name: ENVIRONMENT
    value: "production"
  - name: LOG_LEVEL
    value: "INFO"
  - name: ENABLE_METRICS
    value: "true"
  - name: DEBUG
    value: "false"

# Resource configuration for production
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 1000m
    memory: 2Gi

# Autoscaling for production
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 70

# Service configuration
service:
  type: ClusterIP
  port: 8000

# Ingress for production
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: api.pake-system.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: pake-system-tls
      hosts:
        - api.pake-system.com

# Database configuration for production
postgresql:
  enabled: true
  auth:
    postgresPassword: "production-postgres-REDACTED_SECRET"
    username: "pake"
    REDACTED_SECRET: "production-pake-REDACTED_SECRET"
    database: "pake_system_production"
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: "gp3"
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
    # Enable read replicas for production
    readReplicas:
      replicaCount: 2
      persistence:
        enabled: true
        size: 50Gi
        storageClass: "gp3"
      resources:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi

# Redis configuration for production
redis:
  enabled: true
  auth:
    enabled: true
    REDACTED_SECRET: "production-redis-REDACTED_SECRET"
  master:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "gp3"
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
  # Enable Redis cluster for production
  cluster:
    enabled: true
    nodes: 6
    replicas: 1

# Monitoring for production
monitoring:
  enabled: true
  prometheus:
    enabled: true
    server:
      persistentVolume:
        enabled: true
        size: 50Gi
        storageClass: "gp3"
      resources:
        limits:
          cpu: 2000m
          memory: 4Gi
        requests:
          cpu: 1000m
          memory: 2Gi
      # Enable high availability for production
      ha:
        enabled: true
        replicas: 2
  grafana:
    enabled: true
    adminPassword: "production-grafana-REDACTED_SECRET"
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "gp3"
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    # Enable high availability for production
    ha:
      enabled: true
      replicas: 2

# Security context for production
podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Service mesh for production
serviceMesh:
  enabled: true
  type: "istio"
  sidecar:
    enabled: true
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Network policies for production
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8000
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090

# Pod disruption budget for production
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Health checks for production
healthCheck:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1

livenessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# Backup configuration for production
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "30d"  # Keep backups for 30 days
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

# Production-specific configurations
production:
  enabled: true
  replicas: 3
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  autoscaling:
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 70

# Development features disabled for production
development:
  enabled: false
  hotReload: false
  debugMode: false
