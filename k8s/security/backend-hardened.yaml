# ============================================================================
# PAKE System - Security-Hardened Backend Deployment
# ============================================================================
#
# Security Enhancements:
# - Comprehensive SecurityContext (runAsNonRoot, readOnlyRootFilesystem)
# - Pod Security Standards (restricted profile)
# - Resource limits and requests
# - Liveness, readiness, and startup probes
# - Security scanning labels
# - No privilege escalation
# - Dropped capabilities
#
# Apply: kubectl apply -f k8s/security/backend-hardened.yaml
# ============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pake-backend
  namespace: pake-system
  labels:
    app.kubernetes.io/name: pake-backend
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: pake-system
    app.kubernetes.io/version: '1.0.0'
    security.hardened: 'true'
  annotations:
    # Security scanning annotations
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
    container.apparmor.security.beta.kubernetes.io/pake-backend: runtime/default
spec:
  replicas: 3

  # Update strategy for zero-downtime deployments
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  selector:
    matchLabels:
      app.kubernetes.io/name: pake-backend
      app.kubernetes.io/component: api

  template:
    metadata:
      labels:
        app.kubernetes.io/name: pake-backend
        app.kubernetes.io/component: api
        security.hardened: 'true'
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8000'
        prometheus.io/path: '/metrics'
        # Pod security annotations
        seccomp.security.alpha.kubernetes.io/pod: runtime/default

    spec:
      # ========================================================================
      # Pod-Level Security Context
      # ========================================================================
      securityContext:
        # Run as non-root user (UID 1000 from Dockerfile)
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000

        # Security: Use seccomp profile
        seccompProfile:
          type: RuntimeDefault

        # Security: Prevent containers from gaining more privileges
        # This is critical for preventing privilege escalation attacks
        fsGroupChangePolicy: OnRootMismatch

      # Service account with least privilege
      serviceAccountName: pake-backend-sa
      automountServiceAccountToken: false

      # ========================================================================
      # Container Specification
      # ========================================================================
      containers:
        - name: pake-backend
          image: pake-system:latest
          imagePullPolicy: Always

          # ====================================================================
          # Container-Level Security Context
          # ====================================================================
          securityContext:
            # Prevent privilege escalation
            allowPrivilegeEscalation: false

            # Run as non-root
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000

            # Read-only root filesystem
            # This prevents writing to the container filesystem
            # Any writes must go to mounted volumes
            readOnlyRootFilesystem: true

            # Drop all capabilities and add only what's needed
            capabilities:
              drop:
                - ALL
              # Only add capabilities if absolutely necessary
              # add:
              #   - NET_BIND_SERVICE  # Only if binding to ports < 1024

            # Security: Use seccomp profile
            seccompProfile:
              type: RuntimeDefault

          # ====================================================================
          # Ports
          # ====================================================================
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
            - containerPort: 8001
              name: websocket
              protocol: TCP

          # ====================================================================
          # Environment Configuration
          # ====================================================================
          envFrom:
            - configMapRef:
                name: pake-config
            - secretRef:
                name: pake-secrets

          env:
            # Kubernetes downward API - pod information
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName

            # Application configuration
            - name: APP_ENV
              value: production
            - name: LOG_LEVEL
              value: INFO

          # ====================================================================
          # Volume Mounts (writable, since root filesystem is read-only)
          # ====================================================================
          volumeMounts:
            # Logs directory (writable)
            - name: logs
              mountPath: /app/logs

            # Cache directory (writable)
            - name: cache
              mountPath: /app/cache

            # Data directory (writable)
            - name: data
              mountPath: /app/data

            # Temporary directory (writable)
            - name: tmp
              mountPath: /tmp

          # ====================================================================
          # Resource Management
          # ====================================================================
          resources:
            # Guaranteed QoS class (requests == limits)
            requests:
              memory: '512Mi'
              cpu: '250m'
              ephemeral-storage: '1Gi'
            limits:
              memory: '2Gi'
              cpu: '1000m'
              ephemeral-storage: '2Gi'

          # ====================================================================
          # Health Probes
          # ====================================================================

          # Liveness probe - restart container if failing
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3

          # Readiness probe - remove from service if failing
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 2

          # Startup probe - wait for initial startup
          startupProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30

      # ========================================================================
      # Volumes (emptyDir for ephemeral storage)
      # ========================================================================
      volumes:
        - name: logs
          emptyDir:
            sizeLimit: 500Mi

        - name: cache
          emptyDir:
            sizeLimit: 1Gi

        - name: data
          emptyDir:
            sizeLimit: 1Gi

        - name: tmp
          emptyDir:
            sizeLimit: 100Mi

      # ========================================================================
      # Pod Scheduling and Affinity
      # ========================================================================

      # Graceful termination
      terminationGracePeriodSeconds: 30

      # Restart policy
      restartPolicy: Always

      # DNS policy
      dnsPolicy: ClusterFirst

      # Pod anti-affinity - spread across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - pake-backend
                topologyKey: kubernetes.io/hostname

---
# ============================================================================
# Service Account with Least Privilege
# ============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pake-backend-sa
  namespace: pake-system
  labels:
    app.kubernetes.io/name: pake-backend
    app.kubernetes.io/component: serviceaccount
automountServiceAccountToken: false

---
# ============================================================================
# Service
# ============================================================================
apiVersion: v1
kind: Service
metadata:
  name: pake-backend
  namespace: pake-system
  labels:
    app.kubernetes.io/name: pake-backend
    app.kubernetes.io/component: api
spec:
  type: ClusterIP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours
  ports:
    - name: http
      port: 8000
      targetPort: 8000
      protocol: TCP
    - name: websocket
      port: 8001
      targetPort: 8001
      protocol: TCP
  selector:
    app.kubernetes.io/name: pake-backend
    app.kubernetes.io/component: api

---
# ============================================================================
# Horizontal Pod Autoscaler
# ============================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pake-backend-hpa
  namespace: pake-system
  labels:
    app.kubernetes.io/name: pake-backend
    app.kubernetes.io/component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pake-backend

  minReplicas: 3
  maxReplicas: 10

  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70

    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      selectPolicy: Min

    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max

---
# ============================================================================
# Pod Disruption Budget
# ============================================================================
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pake-backend-pdb
  namespace: pake-system
  labels:
    app.kubernetes.io/name: pake-backend
    app.kubernetes.io/component: api
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: pake-backend
      app.kubernetes.io/component: api
