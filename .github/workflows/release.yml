name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  security-events: write

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '22'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "## Changes in this Release

            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

            ## Installation

            \`\`\`bash
            git clone https://github.com/${{ github.repository }}.git
            cd pake-system
            git checkout ${{ github.ref }}
            pip install -r requirements-phase7.txt
            \`\`\`

            ## Docker

            \`\`\`bash
            docker-compose up -d
            \`\`\`" \
            --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          REDACTED_SECRET: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push MCP Server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            pake-system/mcp-server:${{ steps.version.outputs.VERSION }}
            pake-system/mcp-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Bridge image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.bridge
          push: true
          tags: |
            pake-system/bridge:${{ steps.version.outputs.VERSION }}
            pake-system/bridge:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  upload-assets:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "pyproject.toml" ]; then
            pip install poetry
            poetry install --only main
          elif [ -f "requirements-phase7-fixed.txt" ]; then
            pip install -r requirements-phase7-fixed.txt
          elif [ -f "requirements-phase7.txt" ]; then
            pip install -r requirements-phase7.txt
          else
            echo "No dependency file found for documentation generation"
          fi

      - name: Generate documentation
        run: |
          if [ -f "scripts/generate_docs.py" ]; then
            python scripts/generate_docs.py
          else
            echo "Documentation generation script not found, creating basic docs"
            mkdir -p docs
            echo "# PAKE System Release ${{ github.ref_name }}" > docs/README.md
            echo "See [CHANGELOG.md](CHANGELOG.md) for changes." >> docs/README.md
          fi

      - name: Upload documentation
        run: |
          gh release upload ${{ github.ref_name }} ./docs/ \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Docker Compose file
        run: |
          gh release upload ${{ github.ref_name }} ./docker-compose.yml \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push, upload-assets]
    if: always()

    steps:
      - name: Notify success
        if: needs.create-release.result == 'success' && needs.build-and-push.result == 'success' && needs.upload-assets.result == 'success'
        run: |
          echo "Release ${{ github.ref }} created successfully!"
          echo "Docker images pushed to Docker Hub"
          echo "Documentation and assets uploaded"

      - name: Notify failure
        if: needs.create-release.result == 'failure' || needs.build-and-push.result == 'failure' || needs.upload-assets.result == 'failure'
        run: |
          echo "Release ${{ github.ref }} failed!"
          exit 1
