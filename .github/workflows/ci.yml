name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/live-trend-data-feed]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write
  actions: read
  checks: read
  packages: read

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '22'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pake_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ hashFiles('**/pyproject.toml', '**/requirements-phase7-fixed.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Python dependencies (Poetry)
        run: |
          if [ -f "pyproject.toml" ]; then
            poetry install --with dev,trends
            echo "Using Poetry for dependency management"
          else
            echo "Poetry configuration not found, falling back to pip"
            python -m pip install --upgrade pip setuptools wheel
            pip install -r requirements-phase7-fixed.txt --use-deprecated=legacy-resolver
            pip install pytest pytest-cov pytest-asyncio pytest-mock --use-deprecated=legacy-resolver
          fi

      - name: Install Node dependencies
        run: |
          if [ -d "src/bridge" ]; then
            cd src/bridge
            npm ci
          else
            echo "Bridge directory not found, skipping Node.js setup"
          fi

      - name: Set up test environment
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/pake_test
          export REDIS_URL=redis://localhost:6379
          export TESTING=true
          if [ -f "scripts/setup_test_database.py" ]; then
            if [ -f "pyproject.toml" ]; then
              poetry run python scripts/setup_test_database.py
            else
              python scripts/setup_test_database.py
            fi
          else
            echo "Test database setup script not found, creating basic test environment"
            createdb pake_test || echo "Database may already exist"
          fi

      - name: Run Python tests
        run: |
          echo "Running Python tests..."
          if [ -f "pyproject.toml" ]; then
            echo "Using Poetry environment"
            poetry run python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --tb=short || echo "Some tests failed, but continuing..."
          else
            echo "Using pip environment"
            python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --tb=short || echo "Some tests failed, but continuing..."
          fi

      - name: Run Node tests
        run: |
          if [ -d "src/bridge" ] && [ -f "src/bridge/package.json" ]; then
            echo "Running Node.js tests..."
            cd src/bridge
            npm test || echo "Node.js tests failed, but continuing..."
          else
            echo "Node.js tests not available, skipping"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          if [ -f "pyproject.toml" ]; then
            poetry install --with dev
          else
            python -m pip install --upgrade pip setuptools wheel
            pip install black flake8 mypy isort ruff --use-deprecated=legacy-resolver
          fi

      - name: Run Black formatter
        run: |
          echo "Running Black formatter check..."
          if [ -f "pyproject.toml" ]; then
            poetry run black --check src/ pkgs/ || echo "Black formatting issues found"
          else
            black --check src/ || echo "Black formatting issues found"
          fi

      - name: Run isort
        run: |
          echo "Running isort check..."
          if [ -f "pyproject.toml" ]; then
            poetry run isort --check-only src/ pkgs/ || echo "Import sorting issues found"
          else
            isort --check-only src/ || echo "Import sorting issues found"
          fi

      - name: Run Ruff linter
        run: |
          echo "Running Ruff linter..."
          if [ -f "pyproject.toml" ]; then
            poetry run ruff check src/ pkgs/ || echo "Ruff linting issues found"
          else
            ruff check src/ || echo "Ruff linting issues found"
          fi

      - name: Run MyPy type checker
        run: |
          echo "Running MyPy type checker..."
          if [ -f "pyproject.toml" ]; then
            poetry run mypy src/ pkgs/ || echo "Type checking issues found"
          else
            mypy src/ || echo "Type checking issues found"
          fi

      - name: Run Pre-commit hooks
        run: |
          if [ -f ".pre-commit-config.yaml" ]; then
            echo "Running pre-commit hooks..."
            if [ -f "pyproject.toml" ]; then
              poetry run pre-commit run --all-files || echo "Pre-commit hooks failed"
            else
              pip install pre-commit
              pre-commit run --all-files || echo "Pre-commit hooks failed"
            fi
          else
            echo "No pre-commit configuration found"
          fi

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install bandit safety --use-deprecated=legacy-resolver

      - name: Run Bandit security linter
        run: |
          echo "Running Bandit security linter..."
          bandit -r src/ -f json -o bandit-report.json || echo "Security issues found, but continuing..."

      - name: Run Safety check
        run: |
          echo "Running Safety check..."
          safety check --json --output safety-report.json || echo "Safety issues found, but continuing..."

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build MCP Server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: pake-system/mcp-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Bridge image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.bridge
          push: false
          tags: pake-system/bridge:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker images
        run: |
          docker run --rm pake-system/mcp-server:latest python --version
          docker run --rm pake-system/bridge:latest node --version

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
