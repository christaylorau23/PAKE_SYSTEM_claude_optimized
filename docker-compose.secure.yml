# ============================================================================
# PAKE System - Security-Hardened Docker Compose
# ============================================================================
#
# Purpose: Local development environment with production-like security
#
# Security Features:
# - All services run as non-root users
# - Read-only root filesystems where possible
# - Resource limits
# - No privilege escalation
# - Dropped capabilities
# - Health checks
# - Network isolation
#
# Usage:
#   docker-compose -f docker-compose.secure.yml up -d
#   docker-compose -f docker-compose.secure.yml down
#
# Prerequisites:
#   - Docker Engine 20.10+
#   - Docker Compose 2.0+
#   - .env file with required secrets
# ============================================================================

version: '3.9'

# ============================================================================
# Networks - Isolated networks for service communication
# ============================================================================
networks:
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24

  database-network:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.22.0.0/24

# ============================================================================
# Volumes - Persistent data storage
# ============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  app-cache:
    driver: local

# ============================================================================
# Services
# ============================================================================
services:

  # ==========================================================================
  # PostgreSQL Database
  # ==========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: pake-postgres

    # Security: Run as postgres user (UID 999 in postgres image)
    user: postgres

    security_opt:
      - no-new-privileges:true  # Prevent privilege escalation
      - seccomp:unconfined  # PostgreSQL needs some syscalls

    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

    environment:
      POSTGRES_DB: ${DB_NAME:-pake_system}
      POSTGRES_USER: ${DB_USER:-pake_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password required}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Security: Disable password authentication from localhost
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-scram-sha-256}

    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro

    networks:
      - database-network

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-pake_user}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

    restart: unless-stopped

    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

  # ==========================================================================
  # Redis Cache
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: pake-redis

    # Security: Run as redis user (UID 999 in redis image)
    user: redis

    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined

    cap_drop:
      - ALL

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?Redis password required}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --dir /data
      --save 900 1
      --save 300 10
      --save 60 10000

    volumes:
      - redis-data:/data

    networks:
      - backend-network

    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

    restart: unless-stopped

    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

  # ==========================================================================
  # PAKE Backend API
  # ==========================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE:-2025-01-01}
        GIT_COMMIT: ${GIT_COMMIT:-dev}
        VERSION: ${VERSION:-1.0.0}
    container_name: pake-backend

    # Security: Run as non-root user (UID 1000 from Dockerfile)
    user: '1000:1000'

    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined

    cap_drop:
      - ALL

    read_only: true  # Read-only root filesystem

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

    environment:
      # Application
      APP_ENV: production
      PORT: 8000
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Database
      DATABASE_URL: postgresql://${DB_USER:-pake_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-pake_system}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379

      # Security
      SECRET_KEY: ${SECRET_KEY:?Secret key required}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}

      # External APIs
      FIRECRAWL_API_KEY: ${FIRECRAWL_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}

    volumes:
      # Writable volumes (since root filesystem is read-only)
      - app-logs:/app/logs
      - app-cache:/app/cache
      - /tmp

    networks:
      - frontend-network
      - backend-network
      - database-network

    ports:
      - '${BACKEND_PORT:-8000}:8000'

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    restart: unless-stopped

    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

  # ==========================================================================
  # TypeScript Bridge Service
  # ==========================================================================
  bridge:
    build:
      context: ./src/bridge
      dockerfile: ../../Dockerfile.bridge.production
      args:
        BUILD_DATE: ${BUILD_DATE:-2025-01-01}
        GIT_COMMIT: ${GIT_COMMIT:-dev}
        VERSION: ${VERSION:-1.0.0}
    container_name: pake-bridge

    # Security: Run as non-root user
    user: '1000:1000'

    security_opt:
      - no-new-privileges:true

    cap_drop:
      - ALL

    read_only: true

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

    environment:
      NODE_ENV: production
      PORT: 3000
      BACKEND_URL: http://backend:8000
      LOG_LEVEL: ${LOG_LEVEL:-info}

    volumes:
      - /tmp

    networks:
      - frontend-network
      - backend-network

    ports:
      - '${BRIDGE_PORT:-3000}:3000'

    depends_on:
      backend:
        condition: service_healthy

    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

    restart: unless-stopped

    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

  # ==========================================================================
  # Nginx Reverse Proxy (Optional)
  # ==========================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: pake-nginx

    # Security: Run as nginx user
    user: nginx

    security_opt:
      - no-new-privileges:true

    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

    read_only: true

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /var/cache/nginx:/var/cache/nginx:rw
      - /var/run:/var/run:rw

    networks:
      - frontend-network

    ports:
      - '${NGINX_PORT:-80}:80'

    depends_on:
      - backend
      - bridge

    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/health']
      interval: 30s
      timeout: 5s
      retries: 3

    restart: unless-stopped

    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

# ============================================================================
# Default Configuration
# ============================================================================

# Security: Don't expose container ports to host by default
# Use explicit port mappings only where needed

# All containers restart automatically unless explicitly stopped
# All containers have resource limits to prevent resource exhaustion
# All containers run as non-root users
# All containers use read-only root filesystems where possible
# All containers have health checks for monitoring
# All containers have log rotation to prevent disk exhaustion
