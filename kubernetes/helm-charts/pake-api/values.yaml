# PAKE API Services - Production Values
# Default values for pake-api chart

# Global configuration
global:
  imageRegistry: ''
  imagePullSecrets: []
  storageClass: ''

# Image configuration
image:
  registry: ghcr.io
  repository: pake-system/pake-api
  tag: 'latest'
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment configuration
replicaCount: 10
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 50%
    maxUnavailable: 25%

# Resource configuration
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Pod configuration
podAnnotations:
  prometheus.io/scrape: 'true'
  prometheus.io/port: '8080'
  prometheus.io/path: '/metrics'

podLabels:
  app.kubernetes.io/component: api
  app.kubernetes.io/part-of: pake-system
  tier: backend

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '8080'

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/rate-limit: '100'
    nginx.ingress.kubernetes.io/rate-limit-window: '1m'
    cert-manager.io/cluster-issuer: 'letsencrypt-prod'
  hosts:
    - host: api.pake-system.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: pake-api-tls
      hosts:
        - api.pake-system.com

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 10
  maxReplicas: 50
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60

# Vertical Pod Autoscaler
verticalPodAutoscaler:
  enabled: true
  updateMode: 'Auto'
  minAllowed:
    cpu: 100m
    memory: 256Mi
  maxAllowed:
    cpu: 4000m
    memory: 8Gi

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 70%

# Node assignment
nodeSelector:
  workload: api-services
  node-type: standard

tolerations:
  - key: workload
    operator: Equal
    value: api-services
    effect: NoSchedule

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - pake-api
          topologyKey: kubernetes.io/hostname
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: workload
              operator: In
              values:
                - api-services

# Health checks
livenessProbe:
  httpGet:
    path: /health/live
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /health/ready
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  httpGet:
    path: /health/startup
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 30
  successThreshold: 1

# Environment variables
env:
  - name: ENVIRONMENT
    value: 'production'
  - name: LOG_LEVEL
    value: 'INFO'
  - name: WORKERS
    value: '4'
  - name: MAX_CONNECTIONS
    value: '1000'
  - name: KEEPALIVE_TIMEOUT
    value: '65'
  - name: GRACEFUL_TIMEOUT
    value: '30'

# Environment variables from secrets
envFrom:
  - secretRef:
      name: pake-api-secrets
  - configMapRef:
      name: pake-api-config

# Volume mounts
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: cache
    mountPath: /app/cache
  - name: logs
    mountPath: /app/logs

volumes:
  - name: tmp
    emptyDir: {}
  - name: cache
    emptyDir:
      sizeLimit: 1Gi
  - name: logs
    emptyDir:
      sizeLimit: 2Gi

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ''

# Service Monitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  labels:
    prometheus: kube-prometheus
  annotations: {}

# PostgreSQL dependency
postgresql:
  enabled: false # Use external PostgreSQL cluster
  external:
    host: pake-postgresql.database.svc.cluster.local
    port: 5432
    database: pake_api
    existingSecret: postgresql-credentials
    userKey: username
    REDACTED_SECRETKey: REDACTED_SECRET

# Redis dependency
redis:
  enabled: false # Use external Redis cluster
  external:
    host: pake-redis.database.svc.cluster.local
    port: 6379
    existingSecret: redis-credentials
    REDACTED_SECRETKey: REDACTED_SECRET

# External secrets
externalSecrets:
  enabled: true
  secretStore:
    kind: ClusterSecretStore
    name: vault-backend
  secrets:
    - name: pake-api-secrets
      refreshInterval: '15m'
      data:
        - secretKey: DATABASE_URL
          remoteRef:
            key: pake/database
            property: url
        - secretKey: REDIS_URL
          remoteRef:
            key: pake/redis
            property: url
        - secretKey: JWT_SECRET
          remoteRef:
            key: pake/auth
            property: jwt_secret
        - secretKey: API_KEY
          remoteRef:
            key: pake/api
            property: key

# Persistent volumes
persistence:
  enabled: true
  storageClass: 'fast-ssd'
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  annotations: {}

# Network policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: database
      ports:
        - protocol: TCP
          port: 5432
        - protocol: TCP
          port: 6379
    - to: {}
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
        - protocol: UDP
          port: 53

# Pod security policy
podSecurityPolicy:
  enabled: true
  name: pake-api-psp
