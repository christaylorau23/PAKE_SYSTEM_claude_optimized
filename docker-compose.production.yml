version: '3.8'

services:
  # HashiCorp Vault - Enterprise Secret Management
  vault:
    image: vault:1.15.2
    container_name: pake-vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dev-root-token-2025
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
    ports:
      - '8200:8200'
    volumes:
      - vault-data:/vault/data
      - ./scripts/vault-init.sh:/vault-init.sh:ro
    command:
      [
        'vault',
        'server',
        '-dev',
        '-dev-root-token-id=dev-root-token-2025',
        '-dev-listen-address=0.0.0.0:8200',
      ]
    healthcheck:
      test: ['CMD', 'vault', 'status']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pake-network

  # PostgreSQL Database - Primary Data Store
  postgres:
    image: postgres:15-alpine
    container_name: pake-postgres
    environment:
      - POSTGRES_DB=wealth_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=WealthPass!2025
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=ReplicaPass!2025
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./k8s/postgresql-config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: ['postgres', '-c', 'config_file=/etc/postgresql/postgresql.conf']
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d wealth_db']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pake-network

  # Redis Enterprise - High-Performance Caching
  redis:
    image: redis:7-alpine
    container_name: pake-redis
    command: redis-server --requirepass WealthRedis!2025 --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pake-network

  # PAKE System API - Core Application
  pake-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pake-api
    environment:
      - DATABASE_URL=postgresql://postgres:WealthPass!2025@postgres:5432/wealth_db
      - REDIS_URL=redis://:WealthRedis!2025@redis:6379/0
      - VAULT_URL=http://vault:8200
      - VAULT_TOKEN=dev-root-token-2025
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - MAX_WORKERS=8
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY:-your-firecrawl-api-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-openai-api-key}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-your-alpha-vantage-key}
    ports:
      - '8000:8000'
      - '8080:8080' # Metrics port
    volumes:
      - ./src:/app/src:ro
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pake-network

  # PAKE Bridge - TypeScript Integration
  pake-bridge:
    build:
      context: .
      dockerfile: Dockerfile.bridge
    container_name: pake-bridge
    environment:
      - API_URL=http://pake-api:8000
      - REDIS_URL=redis://:WealthRedis!2025@redis:6379/1
      - NODE_ENV=production
    ports:
      - '3001:3001'
    volumes:
      - ./src/bridge:/app/src:ro
    depends_on:
      - pake-api
      - redis
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pake-network

  # Prometheus - Monitoring & Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pake-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus/'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - pake-network

  # Grafana - Visualization Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: pake-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=WealthDashboard!!!
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - '3000:3000'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - pake-network

  # Nginx - Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pake-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - pake-api
      - pake-bridge
    networks:
      - pake-network

volumes:
  vault-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  pake-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
