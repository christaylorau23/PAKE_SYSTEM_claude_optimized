version: '3.8'

services:
  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.60
    container_name: pake-jaeger
    restart: unless-stopped
    ports:
      - '16686:16686' # Jaeger UI
      - '14268:14268' # HTTP collector
      - '14250:14250' # gRPC collector
      - '6831:6831/udp' # UDP agent
      - '6832:6832/udp' # UDP agent
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - ES_INDEX_PREFIX=jaeger
      - ES_TAGS_AS_FIELDS_ALL=true
    depends_on:
      - elasticsearch
    networks:
      - observability
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --quiet --tries=1 --spider http://localhost:16686/ || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: pake-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--query.max-concurrency=50'
    networks:
      - observability
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --quiet --tries=1 --spider http://localhost:9090/-/healthy || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:11.3.1
    container_name: pake-grafana
    restart: unless-stopped
    ports:
      - '3001:3000'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=redis-datasource,grafana-clock-panel,grafana-piechart-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    depends_on:
      - prometheus
    networks:
      - observability
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch - Tracing Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: pake-elasticsearch
    restart: unless-stopped
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx1024m'
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - observability
    healthcheck:
      test:
        ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # OTEL Collector - Telemetry Data Processing
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.113.0
    container_name: pake-otel-collector
    restart: unless-stopped
    ports:
      - '8888:8888' # Prometheus metrics
      - '8889:8889' # Prometheus metrics (alternative)
      - '4317:4317' # OTLP gRPC receiver
      - '4318:4318' # OTLP HTTP receiver
      - '9464:9464' # Prometheus exporter
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    command: ['--config=/etc/otel-collector-config.yml']
    depends_on:
      - jaeger
      - prometheus
    networks:
      - observability
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --quiet --tries=1 --spider http://localhost:8888/metrics || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.65.0
    container_name: pake-redis-exporter
    restart: unless-stopped
    ports:
      - '9121:9121'
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_EXPORTER_LOG_FORMAT=json
    depends_on:
      - redis
    networks:
      - observability
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --quiet --tries=1 --spider http://localhost:9121/metrics || exit 1',
        ]
      interval: 30s
      timeout: 5s
      retries: 3

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: pake-node-exporter
    restart: unless-stopped
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.processes'
      - '--collector.systemd'
    networks:
      - observability

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.50.0
    container_name: pake-cadvisor
    restart: unless-stopped
    ports:
      - '8080:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - observability

  # Redis - Shared Cache and Session Store
  redis:
    image: redis:7.4-alpine
    container_name: pake-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - observability
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Alertmanager - Alert Management
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: pake-alertmanager
    restart: unless-stopped
    ports:
      - '9093:9093'
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address='
    networks:
      - observability
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --quiet --tries=1 --spider http://localhost:9093/-/healthy || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  redis-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  observability:
    driver: bridge
    name: pake-observability-network
